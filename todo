Introducir el nodoInicio en la openList con f(nodoInicio) = h(nodoInicio)   (Inicialización)

Mientras la openList no esté vacía {
    Sacar de la openList el nodoActual con menor f(nodoInicio)
        f(nodoActual) = g(nodoActual) + h(nodoActual)
    if nodoActual es el nodoFinal, encontramos la solución; break
    
    Meter en a closedList el nodoActual
    Generamos cada nodoSucesor del nodoActual{
        if nodoSucesor no está en la closedList{
            if nodoSucesor está en la openList{
                if g(nodoSucesor) > (g(nodoActual) + costeG){
                    Actualizamos el coste g(nodoSucesor)
                    Actualizamos nodoPadre(nodoSucesor)
                }
            }
            else {
                Introducimos el nodo en la openList
                Actualizamos el coste g(nodoSucesor)
                Actualizamos nodoPadre(nodoSucesor)
            }
            Actualizamos el valor h(nodoSucesor)
            Actualizamos el valor f(nodoSucesor)
        }
    }
}

if()


















#####################################       ############
#&·····=····························#       #···#····#=#
#···································#       #···#·##···#
#···································#       #···#&#····#
#···································#       ############
#···········*·······················#
#··········&?·······················#
#···································#
#···································#
#···································#
#···································#
#···································#
#####################################

- "·" simboliza las celdas libres.
- "#" simboliza las paredes y obstáculos.
- "&" simboliza el coche.
- "=" simboliza el destino.


FALTA:

Leer por ficheros 0 y 1 -> Mensaje error

CONTROLAR QUE EL TAMAÑO MINIMO DEL MAPA ES 4X4 

Fichero.txt posicion del coche -> no devuelve nada









/* A* */
- Almacenar celda padre, para poder retornar    HECHO
- Crear los costes: f(total), g(coste del movimiento), h(coste heuristico del movimiento)   HECHO
- Cambiar el array de movimientos de las celdas, para que almacene las celda_t vecinas y no números (ver si almacenar la posicion i, j) (me gustaría comparar si una posicion que alamcena una Celda_t == a esa misma Celda_t por separado) HECHO
- Crear openset(casilla que se pueden visitar) y closedset(casillas ya visitadas) HECHO
- Array de camino   HECHO
- Crear función heurística (primero manhattan)

Hacer push de la primera posicion en el openset.

Duda sobre aux en rellenarMovimientos.